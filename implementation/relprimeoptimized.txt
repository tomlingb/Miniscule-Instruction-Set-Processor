spi -1
in
sw 1
la RelPrime
jal
lw -1
out
la YayImDone
YayImDone:
j
RelPrime:  	
lw 1  
sw -1  #make a copy of n 
li 2  
sw -2  #load 2 into m 
RelLoop:
spi -3  #prepare the sp
la GCD  
jal  #call GCD 
spi 3 #move sp back 
Lw -4  #get result 
addi -1  
bifz RelDone  #See if result != 1 
RelWhile:
lw -2  
addi 1  
sw -2  #increment m 
la RelLoop  #loop again ?  
j  
RelDone:
lw -2  
sw -1  #move m to be the return value 
lw 0   
j  #return 
GCD:
lw 1  
sw -1 #make a copy of b 
lw 2  
sw -2 #make a copy of a 
binz beginloop #return if a ==0 
lw -2  
sw -1 #move a to return value 
lw 0  
j #return 
beginloop:
lw -2 #load b
Loop:
sub -1 #acc = b - a 
bip Loop #loop again
bifz Done #done if b==0
add -1
sw -2 #store b
lw -1
sub -2
sw -1 #store a - b into a
lw -2 #load b 
bip Loop  
Done:
lw 0 #return a 
j
